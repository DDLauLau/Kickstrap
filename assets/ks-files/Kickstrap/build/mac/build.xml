<?xml version="1.0"?>
<!DOCTYPE project>
<project name="Boilerplate Build" default="build" basedir="../../../"><!-- two back since we're in Kickstrap/build/mac -->
    
    <!-- Load in Ant-Contrib to give us access to some very useful tasks! -->
    <!-- the .jar file is located in the tools directory -->
    <taskdef resource="net/sf/antcontrib/antlib.xml">
        <classpath>
            <pathelement location="${basedir}/Kickstrap/build/mac/tools/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>
    
    <!-- load shell environment -->
    <property environment="ENV" />
    
    <!-- load property files -->
    <property file="build/mac/config/project.properties"/><property file="${basedir}/Kickstrap/build/mac/config/default.properties"/>
    
    <!-- merge the stylesheet properties -->
    <var name="stylesheet-files" value="${file.default.stylesheets}, ${file.stylesheets}"/>
    
    <!-- merge the pages properties -->
    <var name="page-files" value="${file.pages}, ${file.pages.default.include}"/>
    
    <!-- Test for Ant Version Delete this task and all instances of overwrite='no' if you can't upgrade to latest-->
    <fail message="All features of the build script require Ant version 1.8.2 or greater. Please upgrade to the latest version or remove all instances of 'overwrite=no' (and this fail task) from the build script to continue">
        <condition>
            <not>
                <antversion atleast="1.8.2"/>
            </not>
        </condition>
    </fail>
    
    <!--
    *************************************************
    * BASE TARGETS                                  *
    *************************************************
    -->
    <target name="build">
      <!-- Build a production environment -->
      <antcall target="-build.production" />
    </target>
    <target name="clean" depends="-clean"/>
    
    <!--
    *************************************************
    * BUILD TARGETS                                 *
    *************************************************
    -->

    
    <!-- Target: build -->
    <target name="-build.production"
          depends="-intro,
                   -css"/>
    
  <!--
  *************************************************
  * FUNCTION TARGETS                              *
  *************************************************
  -->
    
    <target name="-clean" description="(PRIVATE) Wipe the previous build (Deletes the dir.publish directory">
        <!-- This is a private target -->
        <echo message="Cleaning up previous build directory..."/>
        <delete dir="./${dir.intermediate}/"/>
        <delete dir="./${dir.publish}/"/>
    </target>
    <target name="-intro" description="(PRIVATE) Kindly inform the developer about the impending magic">
        <!-- This is a private target -->
        
        <echo message="====================================================================="/>
        <echo message="Kickstrap LESS Compiler"/>
        <echo message=" "/>
        <echo message="Derived from the HTML 5 Boilerplate"/>
        <echo message="====================================================================="/>
    </target>
    <target name="-mkdirs">
        <condition property="publish.exists">
            <available file="${dir.publish}" type="dir"/>
        </condition>
        <condition property="intermediate.exists">
            <available file="${dir.intermediate}" type="dir"/>
        </condition>
        <if>
            <or>
                <equals arg1="${dir.publish}" arg2="."/>
                <equals arg1="${dir.publish}" arg2=".."/>
                <equals arg1="${dir.publish}" arg2="/"/>
                <equals arg1="${dir.publish}" arg2="./"/>
                <equals arg1="${dir.publish}" arg2="../"/>
            </or>
            <then>
                <fail message="Your dir.publish folder is set to ${dir.publish} which could delete your entire site or worse. Change it in project.properties"/>
            </then>
            <else>
                <echo message="Creating directories..."/>
                <if>
                    <and>
                        <equals arg1="${publish.exists}" arg2="true"/>
                        <equals arg1="${intermediate.exists}" arg2="true"/>
                    </and>
                    <else>
                        <mkdir dir="${dir.intermediate}"/>
                        <copy todir="${dir.intermediate}" includeEmptyDirs="true">
                            <dirset dir="${dir.source}/" excludes="${dir.exclude}"/>
                        </copy>
                        <mkdir dir="${dir.publish}"/>
                        <copy todir="${dir.publish}" includeEmptyDirs="true">
                            <dirset dir="${dir.source}/" excludes="${file.default.exclude}, ${file.exclude}" includes="*"/>
                        </copy>
                    </else>
                </if>
            </else>
        </if>
    </target>
        
    <!-- CSS -->
    

    <target name="-css" depends="-mkdirs" description="Concatenates and Minifies any stylesheets @imported via the file.stylesheets">
        
        <!-- copy source file to intermediate directory -->
        <copy file="${dir.source}/Kickstrap/${file.root.stylesheet}" tofile="${dir.intermediate}/Kickstrap/${file.root.stylesheet}"/>
        
        
        <!-- replace imports with h5bp-import tags (part 2) -->
        <replaceregexp file="${dir.intermediate}/Kickstrap/${file.root.stylesheet}"
                       match="^@media \{ (/\* .* \*/) \}" replace="\1" byline="true" />
        
        <!-- copy skeleton to concat file -->
        <copy file="${dir.intermediate}/Kickstrap/${file.root.stylesheet}"
              tofile="${dir.intermediate}/Kickstrap/style-concat.css" overwrite="true"/>
        
        <!-- load the file into a property -->
        <loadfile property="imports" srcfile="${dir.intermediate}/Kickstrap/${file.root.stylesheet}"/>
        <var name="concat-files" value="${file.root.stylesheet}"/>
        
        <!-- go over the file line by line -->
        <for delimiter="${line.separator}" param="import" list="${imports}">
            <sequential>
                <!-- does this line contain an h5bp-import? -->
                <propertyregex property="file.name" input="@{import}" regexp="/\* h5bp-import: (.*) \*/" select="\1" casesensitive="true" override="true" />
                <if>
                    <isset property="file.name"/>
                    <then>
                        <var name="concat-files" value="${file.name},${concat-files}"/>
                        
                        <!-- load the file into a variable -->
                        <loadfile property="file.contents" srcFile="${dir.source}/Kickstrap/${file.name}"/>
                        
                        <!-- pop that file into the concatenated output file -->
                        <replace file="${dir.intermediate}/Kickstrap/style-concat.css" token="/* h5bp-import: ${file.name} */" value="${file.contents}"/>
                        <var name="file.contents" unset="true"/>
                    </then>
                </if>
            </sequential>
        </for>
        <if>
            <equals arg1="${build.css.less}" arg2="true"/>
            <then>
            		
            		<copy todir="${dir.intermediate}">
								  <fileset dir="${basedir}">
								    <include name="**/*.less"/> 
								  </fileset>
								</copy>
                <lessjs input="${dir.intermediate}/Kickstrap/style-concat.css" output="${dir.intermediate}/Kickstrap/style-concat.css" />
            </then>
        </if>
        <apply executable="java" parallel="false">
            <fileset dir="${dir.intermediate}/Kickstrap/" includes="style-concat.css"/>
            <arg line="-jar"/>
            <arg path="${dir.build.tools}/${tool.yuicompressor}"/>
            <srcfile/>
            <arg line="-o"/>
            <mapper type="merge" to="${basedir}/${dir.intermediate}/Kickstrap/style-concat.min.css"/>
            <targetfile/>
        </apply>
        <checksum file="${dir.intermediate}/Kickstrap/style-concat.min.css" algorithm="sha" property="css.fullsha" />
        <propertyregex property="css.sha" input="${css.fullsha}" regexp=".{${hash.length}}" select="\0" />
        <property name="style.css" value="Kickstrap/${css.sha}.css" />
        <copy file="${dir.intermediate}/Kickstrap/style-concat.css" tofile="${dir.publish}/style.css" />
        <copy file="${dir.intermediate}/Kickstrap/style-concat.min.css" tofile="${dir.publish}/style.min.css" />
        <echo message="Minifying..."/>
        <apply executable="java" parallel="false">
            <fileset dir="${dir.source}/Kickstrap/" excludes="${concat-files}" includes="style.min.css"/>
            <arg line="-jar"/>
            <arg path="${dir.build.tools}/${tool.yuicompressor}"/>
            <srcfile/>
            <arg line="-o"/>
            <mapper type="glob" from="*.css" to="${basedir}/${dir.publish}/Kickstrap/*.css"/>
            <targetfile/>
        </apply>
        <!-- Delete Kickstrap folder from Publish -->
        <delete dir="${dir.publish}/Kickstrap"/>
        <echo message="You new css file should be in Kickstrap/css/" />
    </target>
    <!-- bring back the glory of hot pink -->
    <target name="hawterize">
        <replace file="${dir.source}/Kickstrap/${file.root.stylesheet}"
                        token="#b3d4fc"
                       value="#fe57a1" />
    </target>

    <macrodef name="lessjs">
        <attribute name="input" />
        <attribute name="output" />
        <sequential>
            <java jar="./${dir.build.tools}/${tool.rhino}" fork="true" output="@{output}">
                <arg path="./${dir.build.tools}/${tool.lesscss}" />
                <arg path="@{input}" />
            </java>
        </sequential>
    </macrodef>
    
    <!-- Import project.xml (put any custom build targets in this file so that they aren't overwritten when build.xml is updated) -->
    <!-- See: https://github.com/h5bp/html5-boilerplate/issues/704 for discussion of the original pull request-->
    <import file="./project.xml" />
</project>
